// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// Id defines model for Id.
type Id struct {
	Id int `json:"id"`
}

// Users defines model for Users.
type Users struct {
	Age         *int    `json:"age,omitempty"`
	Gender      *string `json:"gender,omitempty"`
	Name        string  `json:"name"`
	Nationality *string `json:"nationality,omitempty"`
	Patronymic  *string `json:"patronymic,omitempty"`
	Surname     string  `json:"surname"`
	UserId      int     `json:"user_id"`
}

// DeleteV1EnrichUsersParams defines parameters for DeleteV1EnrichUsers.
type DeleteV1EnrichUsersParams struct {
	// Id id данных пользователя в бд
	Id *int `form:"id,omitempty" json:"id,omitempty"`
}

// GetV1EnrichUsersParams defines parameters for GetV1EnrichUsers.
type GetV1EnrichUsersParams struct {
	// Id id пользователя в БД
	Id *int `form:"id,omitempty" json:"id,omitempty"`

	// All Выводит всех пользователей
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// PostV1EnrichUsersJSONBody defines parameters for PostV1EnrichUsers.
type PostV1EnrichUsersJSONBody = map[string]interface{}

// PutV1EnrichUsersJSONBody defines parameters for PutV1EnrichUsers.
type PutV1EnrichUsersJSONBody = map[string]interface{}

// PostV1EnrichUsersJSONRequestBody defines body for PostV1EnrichUsers for application/json ContentType.
type PostV1EnrichUsersJSONRequestBody = PostV1EnrichUsersJSONBody

// PutV1EnrichUsersJSONRequestBody defines body for PutV1EnrichUsers for application/json ContentType.
type PutV1EnrichUsersJSONRequestBody = PutV1EnrichUsersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Проверка работоспособности сервиса
	// (GET /ready)
	GetReady(ctx echo.Context) error
	// Удаление данных пользователя
	// (DELETE /v1/enrich/users)
	DeleteV1EnrichUsers(ctx echo.Context, params DeleteV1EnrichUsersParams) error
	// Получение пользователя по его id
	// (GET /v1/enrich/users)
	GetV1EnrichUsers(ctx echo.Context, params GetV1EnrichUsersParams) error
	// Добавление данных пользователя
	// (POST /v1/enrich/users)
	PostV1EnrichUsers(ctx echo.Context) error
	// Обновление данных пользователя
	// (PUT /v1/enrich/users)
	PutV1EnrichUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReady(ctx)
	return err
}

// DeleteV1EnrichUsers converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1EnrichUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteV1EnrichUsersParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteV1EnrichUsers(ctx, params)
	return err
}

// GetV1EnrichUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1EnrichUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1EnrichUsersParams
	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", ctx.QueryParams(), &params.All)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter all: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1EnrichUsers(ctx, params)
	return err
}

// PostV1EnrichUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1EnrichUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1EnrichUsers(ctx)
	return err
}

// PutV1EnrichUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PutV1EnrichUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutV1EnrichUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/ready", wrapper.GetReady)
	router.DELETE(baseURL+"/v1/enrich/users", wrapper.DeleteV1EnrichUsers)
	router.GET(baseURL+"/v1/enrich/users", wrapper.GetV1EnrichUsers)
	router.POST(baseURL+"/v1/enrich/users", wrapper.PostV1EnrichUsers)
	router.PUT(baseURL+"/v1/enrich/users", wrapper.PutV1EnrichUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SXzW7bRhDHX4XY9khYcpNedGvRIHAPbdCivQRGwYgreQN+ZXcZQAgE6KNpU8hA0MCH",
	"HoqmRV+AUq2Ytkz6FWbfqJhd6iukYrtxVAQ5SSCXs/+Z+f3J2SekGfpRGNBACtJ4QkTzgPqO/nuH85Dj",
	"n4iHEeWSUX2Zzi/LTkRJgwjJWdAm3a5NOH0UM05d0rhfLNvv2mTPLQdh7koEFkjaprwUgrn6+e8E5aIc",
	"wmnTqhg2adPApVUKbRI4Pt1wQ7IwcDwmO5X3I0fyMOj4rFl5W8R8Y+hYUP7DlfKdryx0LsPud3EpC1oh",
	"RnGpaHIWoWDSIJ/d27NaIbciHraYRwWxiWTSw33gd0jhTPUgV32Yqh5MIFV9C45hpp5bqgcJjCFXAzWy",
	"VN9SfTVUv0CGq9VAPYdzSIlNHlMuzE67O/WdOmYURjRwIkYa5NZOfecW0eU50E2pceq4uoRtKsti4SWq",
	"gYlWcwaJBRPIYKqeQQapemrBGeRwDheQ42XI1ABX2xaq1DfxguqpEa49gcRkBKkaLNPp4+OqDzmMF8kc",
	"WqsVgIToJLhuOuJJ7lL5jVaOHRFRGAgD2Sf1ekUWf61W8x+jCiYWblnISLCqMNG/h0bqhWmEGmEJPzVx",
	"m2EgaaAL5USRx5paUe2hwH3mZsR/H3PaIg3yUW3p1lph1ZrxqUbkTTozmFpwDjm8gilW86piNd6+7/BO",
	"VQOXFFWXHtJy6aXTFsi76AhJfaTbJrXHuzUacNY8qMVzv7vUo1Kbar1ZX+jr3+/e0evN6wEZ5I5PpX72",
	"/ustYy5in0AGmYEHEZupQzjR2SRqAFPtCmzjGI4J2o00yKOY8s7ckBgGXbnois8C5sc+aezaZW/vl1C6",
	"XYHS0VwUdmesRjDDig11KY0vcksNtfYZOgISxOe2ifWO8VnTtrFgmqsMEjiF46XC7QD+AjI1VAPV0xtn",
	"KCdXzyCFsYFznbzXUP57paopJnEVQFbwNZzu6y+OLFN6l8prI/omKn+Foxug0i4R+EJ7P4dj/RqFiS7a",
	"pgLAFE43qHA8b02GS1tO7EnSaDmeoAspD8LQo05QaZDrIcMk9cVl7JjSdxfbO5w7nSqWvvz266+2Z62X",
	"lY0+LLvpPfGSyWeofl66aSPLF5BbMMXvpqXJLfspCkWFoe6FouQoHJ+okJ+HZuh4t+yEDx7SpjTFW85t",
	"kse0W0J598Y6tude+nLGT656qj/FZmwaGZLrWyF5hptDDqdro8M2vbRZwf9kneuZ50gPTDjM3sTHKIqr",
	"vBO/P9apXzYmbXyzFHPnvJAflg3+27S2zePIW9rkj/XuvpVNMHRxrcTab5CpH/GYCeeQqJ8g1TIteAUp",
	"nOC+5RNNMQIVB5qKIevPxSkJs9yotDhzF+GM2O5+998AAAD//+R6rhOlEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
